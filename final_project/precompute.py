import math

board_size = 5
piece_num = 6

# Print the header
print("// This file is generated by precompute.py")
print("// Do not edit this file directly")
print("#ifndef PRECOMPUTE_H")
print("#define PRECOMPUTE_H")
print("#include \"agent.h\"")
print("namespace precompute {")

def l_inf_distance(pos1: int, pos2: int) -> int:
    x1, y1 = pos1 % board_size, pos1 // board_size
    x2, y2 = pos2 % board_size, pos2 // board_size
    return max(abs(x1 - x2), abs(y1 - y2))

def move_gen_single(piece: int, location: int) -> list:
    x, y = location % board_size, location // board_size
    moves = []
    h_ok: bool = False
    v_ok: bool = False
    if (piece > piece_num and piece <= 2*piece_num):
        h_ok = x != board_size-1
        v_ok = y != board_size-1
    else:
        h_ok = x != 0
        v_ok = y != 0
    
    if h_ok:
        moves.append((piece << 4) | 0)
    if v_ok:
        moves.append((piece << 4) | 1)
    if h_ok and v_ok:
        moves.append((piece << 4) | 2)
    return moves

# print(move_gen_single(10, 1))
# exit(1)

# Generate a 2D array of distances
distances = [[l_inf_distance(i, j) for j in range(board_size**2)] for i in range(board_size**2)]

# Print the array in C format
print(f"constexpr int l_inf_distance[{board_size**2}][{board_size**2}] = ")
print("{")
for i in range(board_size**2):
    print("{", end="")
    for j in range(board_size**2):
        print(distances[i][j], end="")
        if j != board_size**2 - 1:
            print(", ", end="")
    print("},")
print("};")


# Print the 3-D array in C format
print(f"constexpr ewn::move_t move_gen_single[{2*piece_num+1}][{board_size*board_size}][3] = ")
print("{")
print("{},") # Skip the first row
for i in range(1, 2*piece_num+1):
    print("{", end="")
    for j in range(board_size*board_size):
        moves = move_gen_single(i, j)
        print("{", end="")
        for idx, move in enumerate(moves):
            print(move, end="")
            if idx != len(moves) - 1:
                print(", ", end="")
        print("}", end="")
        if j != board_size*board_size - 1:
            print(", ", end="")
    print("},")
print("};")

# Print the count
print(f"constexpr int move_gen_single_count[{2*piece_num+1}][{board_size*board_size}] = ")
print("{")
print("{},") # Skip the first row
for i in range(1, 2*piece_num+1):
    print("{", end="")
    for j in range(board_size*board_size):
        print(len(move_gen_single(i, j)), end="")
        if j != board_size*board_size - 1:
            print(", ", end="")
    print("},")
print("};")

# Print the footer
print("} // namespace precompute")
print("#endif // PRECOMPUTE_H")
